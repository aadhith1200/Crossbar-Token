{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","noOfTokens","tokensSold","tokenPrice","userTokens","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","CrossbarTokenSale","networks","tokenSaleInstance","Contract","abi","address","tokenInstance","CrossbarToken","methods","call","_tokensSold","price","_tokenPrice","balanceOf","_userTokens","handleSoldEvent","setState","alert","error","handleChange","event","target","value","handleSubmit","preventDefault","buyTokens","send","from","receipt","events","Sold","on","updateOnTokenSold","this","className","Form","Row","Col","xs","Control","placeholder","onChange","onSubmit","type","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9197d23.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport CrossbarToken from \"./contracts/CrossbarToken.json\";\nimport CrossbarTokenSale from \"./contracts/CrossbarTokenSale.json\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport Form from \"react-bootstrap/Form\"\nimport Col from \"react-bootstrap/Col\"\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, noOfTokens: 0, tokensSold: 1, tokenPrice: 0, userTokens: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CrossbarTokenSale.networks[networkId];\n      this.tokenSaleInstance = new web3.eth.Contract(\n        CrossbarTokenSale.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      this.tokenInstance = new web3.eth.Contract(\n        CrossbarToken.abi,\n        CrossbarToken.networks[networkId] && CrossbarToken.networks[networkId].address\n      );\n\n      const _tokensSold = await this.tokenSaleInstance.methods.tokensSold().call();\n      const _tokenPrice = await this.tokenSaleInstance.methods.price().call();\n      const _userTokens = await this.tokenInstance.methods.balanceOf(accounts[0]).call();\n\n      this.handleSoldEvent();\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: this.tokenSaleInstance, tokensSold: _tokensSold, tokenPrice: _tokenPrice, userTokens: _userTokens });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  handleChange = async (event) => {\n    //console.log(event.target.value);\n    this.setState({\n      noOfTokens: event.target.value\n    })\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    if (this.state.noOfTokens <= 0) {\n      alert(\"No of tokens bought should be greater than 0\");\n    }\n    else {\n      let receipt = await this.tokenSaleInstance.methods.buyTokens(this.state.noOfTokens).send({ from: this.state.accounts[0], value: this.state.tokenPrice * this.state.noOfTokens })\n      console.log(receipt);\n    }\n\n  }\n\n  handleSoldEvent = () => {\n    this.tokenSaleInstance.events.Sold().on(\"data\", this.updateOnTokenSold);\n  }\n\n  updateOnTokenSold = async () => {\n    let _userTokens = await this.tokenInstance.methods.balanceOf(this.state.accounts[0]).call();\n    const _tokensSold = await this.tokenSaleInstance.methods.tokensSold().call();\n    alert(\"Transaction Completed!! Successfully bought!\");\n    this.setState({\n      userTokens: _userTokens,\n      tokensSold: _tokensSold\n    });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Crossbar Token Sale</h1>\n        <p>Get your tokens here.</p>\n        <p>Tokens Sold: {this.state.tokensSold}</p>\n        <p>Token Price: {this.state.tokenPrice}</p>\n        <p>Your Tokens: {this.state.userTokens}</p>\n        <Form>\n          <Form.Row>\n            <Col xs={2}>\n              <Form.Control placeholder=\"First name\" onChange={this.handleChange} />\n            </Col>\n          </Form.Row>\n        </Form>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"number\" value={this.state.noOfTokens} onChange={this.handleChange} />\n          <input type=\"submit\" value=\"Buy\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}